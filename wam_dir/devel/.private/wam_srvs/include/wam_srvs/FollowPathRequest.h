// Generated by gencpp from file wam_srvs/FollowPathRequest.msg
// DO NOT EDIT!


#ifndef WAM_SRVS_MESSAGE_FOLLOWPATHREQUEST_H
#define WAM_SRVS_MESSAGE_FOLLOWPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace wam_srvs
{
template <class ContainerAllocator>
struct FollowPathRequest_
{
  typedef FollowPathRequest_<ContainerAllocator> Type;

  FollowPathRequest_()
    : position()
    , normal()
    , size(0)  {
    }
  FollowPathRequest_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , normal(_alloc)
    , size(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _normal_type;
  _normal_type normal;

   typedef int32_t _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::wam_srvs::FollowPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_srvs::FollowPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPathRequest_

typedef ::wam_srvs::FollowPathRequest_<std::allocator<void> > FollowPathRequest;

typedef boost::shared_ptr< ::wam_srvs::FollowPathRequest > FollowPathRequestPtr;
typedef boost::shared_ptr< ::wam_srvs::FollowPathRequest const> FollowPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_srvs::FollowPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wam_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_srvs::FollowPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_srvs::FollowPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_srvs::FollowPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d84f5b474d984f3bb9b08180eaffe23c";
  }

  static const char* value(const ::wam_srvs::FollowPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd84f5b474d984f3bULL;
  static const uint64_t static_value2 = 0xb9b08180eaffe23cULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_srvs/FollowPathRequest";
  }

  static const char* value(const ::wam_srvs::FollowPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32[]   position\n"
"geometry_msgs/Point32[]   normal\n"
"int32 size\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::wam_srvs::FollowPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.normal);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_srvs::FollowPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_srvs::FollowPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "normal[]" << std::endl;
    for (size_t i = 0; i < v.normal.size(); ++i)
    {
      s << indent << "  normal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.normal[i]);
    }
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_SRVS_MESSAGE_FOLLOWPATHREQUEST_H
